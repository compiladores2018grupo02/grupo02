options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

// ----- início: analisador léxico
PARSER_BEGIN(Compilador)
import java.io.*;
import minhasClasses.*;

public class Compilador {
	static Tabela tabela = new Tabela();
  
   	public static void main(String args[])  throws ParseException  {
      Compilador compilador = null;
      try {
         compilador = new Compilador(new FileInputStream("nossoexemplo.spc"));
         Compilador.inicio();
         System.out.println(tabela.toString());
      }
      catch(FileNotFoundException e) {
         System.out.println("Erro: arquivo nao f sencontrado");
      }
      catch(TokenMgrError e) {
         System.out.println("Erro lexico\n" + e.getMessage());
      }
      catch(ParseException e) {
         System.out.println("Erro sintático\n" + e.getMessage());
      }
   }
}


PARSER_END(Compilador) 
// ----- fim: analisador léxico
 
SKIP : { " " | "\t" | "\r" | "\n" }

//TOKENS DE COMANDOS 
TOKEN [IGNORE_CASE] : {
  		<EXIBE: "exibe" >  |
  		<LEITURA: "le" > | 
		<SE: "se" > |
      	<FIMSE: "fim-se" > |
      	<ENQUANTO: "enquanto" > |
      	<FIMENQUANTO: "fim-enquanto" > 
}
//TOKENS DE TIPOS 
TOKEN [IGNORE_CASE] : {
  		<NUMERO: "numero" >  |
  		<PALAVRA: "palavra" >  
}
//----------CARACTERES----------
TOKEN : {
		< #CHAR: ["a"-"z"] | ["A" - "Z"] > | 
   		< AP: "(" > |
    	< FP: ")" > |
		< PV: ";" > |
		< VIRGULA: "," > |
    	< STRING: "\"" (~["\""])* "\"" > |
   		< VAR: (< CHAR >)+ (["a" - "z", "A" - "Z" ,"0" - "9", "_"])* > 
}
//-----------NUMEROS-----------
TOKEN : {
	< #DIGIT: ["0"-"9"] > |  
    < NUM: (< DIGIT >)* (".")? (< DIGIT >)+ > 
}
//----------OPERADORES---------
TOKEN : {
 	< SOMA: "+" > |
	< SUB: "-" > |
	< MUL: "*" > |
    < DIV: "/" > |
    < OU: "OR" > |
    < ATRIB: "<-"  > |
    < IGUAL: "=" > |
   	< CONCAT: "&" > 
}
  
/*
JAVACODE void inicio()
{
      Token t;
   do {
      t = getNextToken();
      System.out.println(tokenImage[t.kind]+"\t"+t.image);
   }
   while(t.kind != EOF);
}
*/

void inicio(): { }
{
	(comando())* < EOF >
}
void comando(): { }
{
	atribuicao() | declaracao() | se() | enquanto() | le() | exibe ()
}
 
void atribuicao(): { Simbolo simb; Token t; }
{
	t = <VAR> {
		simb = new Simbolo(t.image);
        tabela.inclui(simb);
	}
	<ATRIB> expressao() <PV>
}

void declaracao():{ }
{
	(<NUMERO>|<PALAVRA>) <VAR> ( <ATRIB> expressao() )? (<VIRGULA> <VAR> ( <ATRIB> expressao() )? )* <PV>
}

void se(): { }
{
	 <SE> <AP> expressao() <FP> inicio() <FIMSE>
}

void enquanto():{ }
{
	<ENQUANTO> <AP> expressao() <FP> inicio() <FIMENQUANTO>
}

void le():{ }
{
	<LEITURA> <VAR> ( <VIRGULA> <VAR> )* <PV>
}

void exibe():{ }
{
  	<EXIBE> expressao() ( <VIRGULA> expressao() )* <PV>
}

void expressao():{ }
{
	termo()(<OU> termo())*
}

void termo():{ }
{
	 termo1() (<IGUAL> termo1())?
}

void termo1():{ }
{
	termo2() (<CONCAT> termo2())*
}

void termo2():{}
{
	termo3() ((<SOMA>|<SUB>) termo3())*
}

void termo3():{ }
{
	termo4() ((<MUL>|<DIV>) termo4())*
}

void termo4():{ }
{
	<AP> expressao() <FP>
	|<NUM>
	|<SOMA><NUM>
	|<SUB><NUM>
	|<VAR>
	|<STRING>

}